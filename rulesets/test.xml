<ruleset name="Test Rules"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0
                      http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>Contains rules for PHPUnit tests.</description>

    <rule name="NumberOfMocks"
          message="{0} mocks are found in this test. Try to reduce the mocks to {1} or less."
          class="MS\PHPMD\Rule\Test\NumberOfMocks">
        <description>
            <![CDATA[
A test should be smaller than the production code. If you have an excessive usage of mocks
your production code is to complex or has to many dependencies.
Try to reduce the complexity and dependency and make your production code as simple as you can.
Then to write a test is much more easier with only a few mocks.
            ]]>
        </description>
        <priority>4</priority>
        <properties>
            <property name="number" value="3" description="allowed Number of mocks" />
            <property name="names" value="mock,getMock" description="filtered method names in the test" />
            <property name="delimiter" value="," description="delimiter for names" />
            <property name="match" value="1" description="should the method name match" />
        </properties>
        <example>
            <![CDATA[
class Test extends \PHPUnit_Framework_TestCase
{
    public function testSomething() // good
    {
        $entityManager = \Mockery::mock('Doctrine\ORM\EntityManager');

        // ...
    }

    public function testComplex() // bad
    {
        $entityManager = \Mockery::mock('Doctrine\ORM\EntityManager');
        $service1 = \Mockery::mock('Service1');
        $service2 = \Mockery::mock('Service2');
        $service3 = \Mockery::mock('Service3');
        $service4 = \Mockery::mock('Service4');
    }
}
            ]]>
        </example>
    </rule>

    <rule name="NumberOfAsserts"
          message="{0} asserts are found in this test. Try to reduce the asserts to {1} or less."
          class="MS\PHPMD\Rule\Test\NumberOfAsserts">
        <description>
            <![CDATA[
If a test fails and you have an excessive usage of asserts in this test, then it is difficult to find the problem.
Also the maintainability will increase, because the test case is not so complex.
Testing a lot of dependencies with one test violate of the single responsibility principle.
            ]]>
        </description>
        <priority>4</priority>
        <properties>
            <property name="number" value="5" description="allowed Number of asserts" />
            <property name="names" value="assert" description="filtered assert names in the test" />
            <property name="delimiter" value="," description="delimiter for names" />
            <property name="match" value="0" description="should the assert name match" />
        </properties>
        <example>
            <![CDATA[
class Test extends \PHPUnit_Framework_TestCase
{
    public function testSomething() // good
    {
        $this->assertTrue();
        $this->assertFalse();
        $this->assertContain();
    }

    public function testComplex() // bad
    {
        $this->assertTrue();
        $this->assertFalse();
        $this->assertContain();
        $this->assertTrue();
        $this->assertFalse();
        $this->assertContain();
    }
}
            ]]>
        </example>
    </rule>

    <rule name="MethodName"
          message="Only {0} words are found in the method name. Try to describe your code as good as you can with {1} or more words."
          class="MS\PHPMD\Rule\Test\MethodName">
        <description>
            <![CDATA[
The method name in your test should describe what they will check. This works only with a few more words.
Then you can use the --testdox argument for phpunit to display a nice overview from what you check.
            ]]>
        </description>
        <priority>3</priority>
        <properties>
            <property name="number" value="3" description="minimum number of words" />
            <property name="regex" value="([A-Z])" description="regex for a new word" />
        </properties>
        <example>
            <![CDATA[
class Test extends \PHPUnit_Framework_TestCase
{
    public function testCanAddTwoNumbers() // good
    {
    }

    public function testAdd() // bad
    {
    }
}
            ]]>
        </example>
    </rule>

</ruleset>
