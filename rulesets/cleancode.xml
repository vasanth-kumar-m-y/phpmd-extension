<ruleset name="Clean Code Rules Extended"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0
                      http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>Contains rules from SOLID. Contains rules for maintainable and extendable code. The code should be easy to understand, modified and tested.</description>

    <rule name="ConditionalExpression"
          message="Try to avoid using inline ifs. They conceal the complexity of your code. Furthermore they obstruct the expandability. Refactor your code and increase the readability."
          class="MS\PHPMD\Rule\CleanCode\ConditionalExpression">
        <description>
            <![CDATA[
Inline ifs conceal the complexity of your code. When you extend your code you will nest inline ifs. Don't even mention that.
Keep clean and use only one notation for decisions. It increase the readability.
            ]]>
        </description>
        <priority>5</priority>
        <example>
            <![CDATA[
class Example
{
    public function doSomething()
    {
        $a = 1 === 1 ? (3 === 2 ? 'true' : 1) : false;
    }
}
            ]]>
        </example>
    </rule>

    <rule name="ConstructorNewOperator"
          message="With a new operator in the constructor you have a strong dependency. Make your class flexible and inject the new instance via DI."
          class="MS\PHPMD\Rule\CleanCode\ConstructorNewOperator">
        <description>
            <![CDATA[
With a new operator in the constructor you have a strong dependency. Make your class flexible and inject the new instance via DI.
Even better is to define an interface and inject this via the constructor parameter. So you can replace the dependency with an other instance.
You can use the symfony service container and define a service with arguments. Please check also the calls argument.
With this rule you support the open-close principle.
            ]]>
        </description>
        <priority>4</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="allowedClassNames" value="DateTime,ArrayCollection" description="whitelist for class names. These are allowed to instantiate in the constructor" />
        </properties>
        <example>
            <![CDATA[
class Converter
{
    private $reader;

    public function __construct()
    {
        $this->reader = new Reader(); // bad
    }
}

class Converter
{
    private $reader;

    public function __construct(ReaderInterface $reader)
    {
        $this->reader = $reader; // good
    }
}
            ]]>
        </example>
    </rule>

    <rule name="DataStructureConstants"
          message="Don't contain constants in your data structure. Important information are distribute throughout the project. You reduce the reusability."
          class="MS\PHPMD\Rule\CleanCode\DataStructureConstants">
        <description>
            <![CDATA[
Don't contain constants in your data structure. Important information are distribute throughout the project. You reduce the reusability.
It is better to create a "Statics" namespace. Than you create final classes with your constants in this namespace.
So you can use the constants independent of your data structure.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="dataStructureNamespaceRegex" value="(Entity|Domain)i" description="data structure regex for namespace" />
            <property name="dataStructureClassNameRegex" value="((?=(^((?!Entity).)*$))(^((?!Repository).)*$))i" description="data structure regex for class name" />
        </properties>
        <example>
            <![CDATA[
// good
class Identifier
{
    const SPECIAL_ID = 1;
}

// bad
class Entity
{
    const SPECIAL_ID = 1;

    public function getAttribute()
    {
    }
}
            ]]>
        </example>
    </rule>

    <rule name="DataStructureMethods"
          message="The method should only be a simple {0} in this data structure."
          class="MS\PHPMD\Rule\CleanCode\DataStructureMethods">
        <description>
            <![CDATA[
If the class is an data structure representation, it should contain only simple getter or setter.
Otherwise you have a data object and a business object in once. Swap out the methods with business logic to a service.
If your class is an data structure, use the "@isDataStructure" annotation to force the validation.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="prefixes" value="get,set,is,has,add,remove" description="allowed prefixes in the methods" />
            <property name="whitelist" value="__construct,__destruct,__set,__get,__call,__callStatic,__isset,__unset,__sleep,__wakeup,__toString,__invoke,__set_state,__clone" description="allowed method names" />
            <property name="dataStructureNamespaceRegex" value="(Entity|Domain)i" description="data structure regex for namespace" />
            <property name="dataStructureClassNameRegex" value="((?=(^((?!Entity).)*$))(^((?!Repository).)*$))i" description="data structure regex for class name" />
        </properties>
        <example>
            <![CDATA[
class Entity
{
    private $data;

    public function getData() // good
    {
        return $this->data;
    }

    public function setData($data) // good
    {
        $this->data = $data;

        return $this;
    }

    public function setData($data) // bad
    {
        $this->data = $data;
        $this->doSomething();
    }

    public function doSomthing() // bad
    {
        foreach ($this->data as $data) {
            calculate($data);
        }
    }
}
            ]]>
        </example>
    </rule>

    <rule name="MemberPrimaryPrefix"
          message="Don't chain methods excessively. There are {0} concatenations allowed. The code becomes hard to test and violates the law of demeter."
          class="MS\PHPMD\Rule\CleanCode\MemberPrimaryPrefix">
        <description>
            <![CDATA[
Try to avoid train wrecks. Your class should have a low coupling. You have to use mocks excessively when you deep link to subclasses.
Create a a wrapper method in your related class and delegate the access. You can avoid code duplications. See law of demeter.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="maxChainCount" value="2" description="max count of method chains" />
            <property name="allowedPrefixes" value="add,set" description="allowed prefixes for the method train" />
            <property name="delimiter" value="," description="delimiter for explode" />
        </properties>
        <example>
            <![CDATA[
class Entry
{
    public function getName()
    {
        return $this->name;
    }
}

class Relation
{
    public function getEntry()
    {
        return $this->entry;
    }

    public function getEntryName()
    {
        return $this->entry->getName();
    }
}

class Service
{
    public function doSomething()
    {
        $name = $this->relation->getEntry()->getName(); // bad
        $name = $this->relation->getEntryName(); // good
    }
}
            ]]>
        </example>
    </rule>

    <rule name="PublicFieldDeclaration"
          message="Try to avoid public class variables. Use Getter to access the variable. It supports the principle of privacy."
          class="MS\PHPMD\Rule\CleanCode\PublicFieldDeclaration">
        <description>
            <![CDATA[
Try to avoid public class variables. Use Getter to access the variable. It supports the law of demeter.
The class follows the principle of privacy and don't tell other classes the inner structure. Also you can control the access.
            ]]>
        </description>
        <priority>5</priority>
        <example>
            <![CDATA[
class Service
{
    public $variable; // bad

    private $variable;

    public function getVariable() // good
    {
        return $this->variable;
    }
}
            ]]>
        </example>
    </rule>

    <rule name="ReturnStatement"
          message="Don't write your logical code containing {0} in the return statement line. It increase the reading rate."
          class="MS\PHPMD\Rule\CleanCode\ReturnStatement">
        <description>
            <![CDATA[
Don't write your logical code in the return statement line. It is hard to understand. Move the complex structure ahead.
It increase the reading rate. Then you can extend the code easily without touching the return statement.
            ]]>
        </description>
        <priority>3</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="forbiddenChildren" value="BooleanAndExpression,BooleanOrExpression,UnaryExpression" description="forbidden children" />
        </properties>
        <example>
            <![CDATA[
class Returner
{
    public function getType() // good
    {
        return $variable;
    }

    public function getType() // good
    {
        return $this->getVariable();
    }

    public function getType() // bad
    {
        return 1 === 1 ? '1' : 2;
    }

    public function getType() // bad
    {
        return $this->doSomething() && !$this->doAnything();
    }

    public function getType() // bad
    {
        return 1 > count($this->doSomething());
    }
}
            ]]>
        </example>
    </rule>

    <rule name="SwitchStatement"
          message="Try to avoid using switch-case statements. Use polymorphism instead."
          class="MS\PHPMD\Rule\CleanCode\SwitchStatement">
        <description>
            <![CDATA[
Switch statements scaling the complexity of your code in a vertical way. You have to change the statement every time when you add a new clause.
You violate the Open-Close principe. If you extend your code, you will become troubles with dependencies and sub-statements.
Use polymorphism instead. First extract the switch statement and then move the methods to get it onto the class where the polymorphism is needed.
Then you have to decide whether replace the type code with subclasses or replace the type code with state/strategy.
When you have set up the inheritance structure, you can replace the conditional with polymorphism.
            ]]>
        </description>
        <priority>5</priority>
        <example>
            <![CDATA[
class Example
{
    public function getType() // bad solution
    {
        switch ($type) {
            case 'one':
                return 'one';
                break;
            case 'two':
                return 'two';
                break;
        }
    }
}

// good solution using polymorphism

interface ExampleInterface
{
    public function getType();
}

class One implements ExampleInterface
{
    public function getType()
    {
        return 'one';
    }
}

class Two implements ExampleInterface
{
    public function getType()
    {
        return 'two';
    }
}
            ]]>
        </example>
    </rule>

    <rule name="TraitPublicMethod"
          message="The purpose of a trait should be the reuse of methods which help the basic classes. Make your code clearly and define interfaces of your class as public methods."
          class="MS\PHPMD\Rule\CleanCode\TraitPublicMethod">
        <description>
            <![CDATA[
Traits should never have a public method. The purpose of a trait should be the reuse of methods which help the basic classes.
Make your code clearly and define interfaces of your class as public methods. Don't hide it in traits.
Keep in mind, every class with your trait and a public method provides this method for other classes.
If you want to refactor your code and dissolve the inheritance, prevent an excessive usage of traits. Implement design patterns.
            ]]>
        </description>
        <priority>5</priority>
        <example>
            <![CDATA[
trait UserComparator
{
    protected function doSomething() // good
    {
    }

    public function doOtherThings() // maybe bad?
    {
    }
}
class BasicClass
{
    use UserComparator;
}
$class = new BasicClass();

// make this sense?
$things = $class->doOtherThings();
            ]]>
        </example>
    </rule>

    <rule name="TryStatement"
          message="This method contains more than one try statement. Swap out the try statement in an extra method. It increases the readability."
          class="MS\PHPMD\Rule\CleanCode\TryStatement">
        <description>
            <![CDATA[
A method should be a wrapper for a try statement. It increase the readability. Try to find a good name for the method.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="delimiter" value="," description="delimiter for explode" />
            <property name="allowedChildren" value="catch,finally" description="allowed children" />
        </properties>
        <example>
            <![CDATA[
class TryThings
{
    public function tryToDoSomething() // good
    {
        try {
            $this->doSomething();
        } catch () {
        }
    }

    public function doSomething() // bad
    {
        $this->work();

        try {
            $this->doSomething();
        } catch () {
        }

        try {
            $this->doSomething();
        } catch () {
        }

        if (1 === 1) {
            foreach ($data as $item) {
                $this->doMore();
            }
        }
    }
}
            ]]>
        </example>
    </rule>

    <rule name="PrivateFieldDeclaration"
          message="The variable is used in {0} percent of the class methods. To have a high cohesion it should be more than {1} percent. Split the class based on the single-responsibility principle."
          class="MS\PHPMD\Rule\CleanCode\PrivateFieldDeclaration">
        <description>
            <![CDATA[
If you have a lot of private variables in you class which are used in only a few methods the cohesion is very low.
You can split the class and create atomic classes. See single-responsibility principle.
It is also possible, that a variable doesn't have to define as class member variable. Switch the variable to the method that uses it.
            ]]>
        </description>
        <priority>2</priority>
        <properties>
            <property name="percent" value="50" description="min percent that a private variable should contains in methods" />
            <property name="dataStructureNamespaceRegex" value="(Entity|Domain)i" description="data structure regex for namespace" />
            <property name="dataStructureClassNameRegex" value="((?=(^((?!Entity).)*$))(^((?!Repository).)*$))i" description="data structure regex for class name" />
        </properties>
        <example>
            <![CDATA[
class SingleService
{
    private $variable25percent; // bad

    private $variable50percent; // bad

    private $variable75percent; // good

    public function doSomething($variable25percent)
    {
        $this->variable25percent = $this->variable50percent;

        if ($this->variable50percent && $this->variable75percent) {
            $this->variable25percent = 1;
        }
    }

    public function doOtherThings()
    {
        $this->variable50percent;
    }

    protected function getData()
    {
        $this->variable75percent;
    }

    private function getType()
    {
        return $this->variable75percent;
    }
}
            ]]>
        </example>
    </rule>
</ruleset>
